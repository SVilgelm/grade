// Extracted from Go Standard library via
// https://github.com/golang/tools/blob/7f3a9aa/benchmark/parse/parse.go
// and then grossly modified.

// Copyright 2014 The Go Authors. All rights reserved.

// License from The Go Authors:
/*
Copyright (c) 2009 The Go Authors. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

   * Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following disclaimer
in the documentation and/or other materials provided with the
distribution.
   * Neither the name of Google Inc. nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// Package parse provides support for parsing benchmark results as
// generated by 'go test -bench'.
package parse

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"regexp"
	"strconv"
	"strings"
)

// Flags used by Benchmark.Measured to indicate
// which measurements a Benchmark contains.
const (
	NsPerOp = 1 << iota
	MBPerS
	AllocedBytesPerOp
	AllocsPerOp
)

// Benchmark is one run of a single benchmark.
type Benchmark struct {
	Name              string  // benchmark name, stripped of Benchmark prefix and NumCPU suffix.
	NumCPU            int     // number of CPUs used to run benchmark
	N                 int     // number of iterations
	NsPerOp           float64 // nanoseconds per iteration
	AllocedBytesPerOp uint64  // bytes allocated per iteration
	AllocsPerOp       uint64  // allocs per iteration
	MBPerS            float64 // MB processed per second
	Measured          int     // which measurements were recorded
}

// Name looks like BenchmarkFoo or BenchmarkBar-123.
// Look for group of dash followed by one or more numbers, anchored to end of string.
var reNumCPUSuffix = regexp.MustCompile(`(?:-(\d+))$`)

// ParseLine extracts either a Benchmark or a package name from a single line of testing.B
// output. If err is nil, either package name will be an empty string or benchmark will be nil.
func ParseLine(line string) (*Benchmark, string, error) {
	fields := strings.Fields(line)

	// Two required, positional fields: Name and iterations.
	if len(fields) < 2 {
		return nil, "", fmt.Errorf("two fields required, have %d", len(fields))
	}

	if fields[0] == "ok" {
		// Found a package boundary.
		return nil, fields[1], nil
	}

	if !strings.HasPrefix(fields[0], "Benchmark") {
		return nil, "", fmt.Errorf(`first field does not start with "Benchmark"`)
	}
	n, err := strconv.Atoi(fields[1])
	if err != nil {
		return nil, "", err
	}

	name := strings.TrimPrefix(fields[0], "Benchmark")
	name = reNumCPUSuffix.ReplaceAllLiteralString(name, "")
	b := &Benchmark{Name: name, N: n}
	if match := reNumCPUSuffix.FindStringSubmatch(fields[0]); match == nil {
		b.NumCPU = 1
	} else {
		n, err := strconv.Atoi(match[1])
		if err != nil {
			return nil, "", err
		}
		b.NumCPU = n
	}

	// Parse any remaining pairs of fields; we've parsed one pair already.
	for i := 1; i < len(fields)/2; i++ {
		b.parseMeasurement(fields[i*2], fields[i*2+1])
	}
	return b, "", nil
}

func (b *Benchmark) parseMeasurement(quant string, unit string) {
	switch unit {
	case "ns/op":
		if f, err := strconv.ParseFloat(quant, 64); err == nil {
			b.NsPerOp = f
			b.Measured |= NsPerOp
		}
	case "MB/s":
		if f, err := strconv.ParseFloat(quant, 64); err == nil {
			b.MBPerS = f
			b.Measured |= MBPerS
		}
	case "B/op":
		if i, err := strconv.ParseUint(quant, 10, 64); err == nil {
			b.AllocedBytesPerOp = i
			b.Measured |= AllocedBytesPerOp
		}
	case "allocs/op":
		if i, err := strconv.ParseUint(quant, 10, 64); err == nil {
			b.AllocsPerOp = i
			b.Measured |= AllocsPerOp
		}
	}
}

func (b *Benchmark) String() string {
	buf := new(bytes.Buffer)
	fmt.Fprintf(buf, "%s %d", b.Name, b.N)
	if (b.Measured & NsPerOp) != 0 {
		fmt.Fprintf(buf, " %.2f ns/op", b.NsPerOp)
	}
	if (b.Measured & MBPerS) != 0 {
		fmt.Fprintf(buf, " %.2f MB/s", b.MBPerS)
	}
	if (b.Measured & AllocedBytesPerOp) != 0 {
		fmt.Fprintf(buf, " %d B/op", b.AllocedBytesPerOp)
	}
	if (b.Measured & AllocsPerOp) != 0 {
		fmt.Fprintf(buf, " %d allocs/op", b.AllocsPerOp)
	}
	return buf.String()
}

// ParseMultipleBenchmarks reads from the given io.Reader and
// returns the set of benchmarks and the name of the package those benchmarks belong to.
// Input is exhausted when (nil, "", nil) is returned
func ParseMultipleBenchmarks(r io.Reader) (map[string][]*Benchmark, error) {
	res := make(map[string][]*Benchmark)

	var bs []*Benchmark

	scan := bufio.NewScanner(r)
	for scan.Scan() {
		txt := scan.Text()

		b, pkg, err := ParseLine(txt)
		if err != nil {
			// That just means we couldn't parse this particular line.
			continue
		}

		if pkg != "" {
			// Found a package boundary. Store this group of benchmarks.
			res[pkg] = bs
			bs = nil
			continue
		}

		bs = append(bs, b)
	}

	if err := scan.Err(); err != nil {
		return nil, err
	}

	return res, nil
}
