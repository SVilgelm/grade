name: Go

on:
  pull_request:
    branches:
      - master

jobs:
  tests:
    name: Style and Unit Tests
    runs-on: ubuntu-latest
    env:
      LINT_VERSION: "v1.22.2"
      NANCY_VERSION: "v0.0.39"
    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.x
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Cache Tools
        id: cache-tools
        uses: actions/cache@v1
        with:
          path: ~/tools
          key: ${{ runner.os }}-tools-${LINT_VERSION}-${NANCY_VERSION}
      - name: Install Tools
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/tools
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b ~/tools ${LINT_VERSION}
          curl -L https://github.com/sonatype-nexus-community/nancy/releases/download/${NANCY_VERSION}/nancy-linux.amd64-${NANCY_VERSION} -o ~/tools/nancy
          chmod +x ~/tools/nancy
      - name: Update PATH
        run: echo "::add-path::~/tools"
      - name: Lint
        run: golangci-lint run ./...
      - name: Nancy
        run: nancy go.sum
      - name: Unit Tests
        run: go test -race -cover -coverprofile=coverage.txt -covermode=atomic -cpu 1,2 -bench . -benchmem ./... > test.log
      - name: Upload log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: log
          path: test.log
      - name: Build
        run: go build -o grade grade.go
      - name: Upload grade
        uses: actions/upload-artifact@v1
        with:
          name: bin
          path: grade

  json:
    name: Grade Json
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Download grade
        uses: actions/download-artifact@v1
        with:
          name: bin
      - name: Make executable
        run: chmod +x bin/grade
      - name: Download log
        uses: actions/download-artifact@v1
        with:
          name: log
      - uses: actions/github-script@0.3.0
        id: commited-at
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const commit_details = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
            return commit_details.data.author.date
      - name: Make logs dir
        run: mkdir logs
      - name: Grade JSON
        run: >-
          ./bin/grade json
          --hardwareid="github/actions"
          --goversion="$(go version | cut -d' ' -f3-)"
          --revision="${{ github.sha }}"
          --timestamp=${{ steps.commited-at.outputs.result }}
          --branch="${{ github.ref }}"
          < log/test.log
          2>&1
          | tee -a logs/json.log
      - name: Grep
        run: |
          grep "BenchmarkFib" logs/json.log
          grep "BenchmarkFibDriver" logs/json.log
      - name: Upload log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: json
          path: logs

  influx:
    name: Grade InfluxDB
    needs: tests
    runs-on: ubuntu-latest
    services:
      influxdb:
        image: influxdb:latest
        ports:
          - 8086:8086
        options: "--name=influxdb"
    env:
      DATABASE: Benchmarks
      COLLECTION: Grade
    steps:
      - name: Download grade
        uses: actions/download-artifact@v1
        with:
          name: bin
      - name: Make executable
        run: chmod +x bin/grade
      - name: Download log
        uses: actions/download-artifact@v1
        with:
          name: log
      - uses: actions/github-script@0.3.0
        id: commited-at
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const commit_details = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
            return commit_details.data.author.date
      - name: Make logs dir
        run: mkdir logs
      - name: Grade dry-run
        run: >-
          ./bin/grade influx
          --connection-url=""
          --hardwareid="github/actions"
          --goversion="$(go version | cut -d' ' -f3-)"
          --revision="${{ github.sha }}"
          --timestamp=${{ steps.commited-at.outputs.result }}
          --branch="${{ github.ref }}"
          < log/test.log
          2>&1
          | tee -a logs/dry-run.log
      - name: Grep
        run: |
          grep "BenchmarkFib" logs/dry-run.log
          grep "BenchmarkFibDriver" logs/dry-run.log
      - name: Create Database
        run: docker exec influxdb influx -execute "CREATE DATABASE ${DATABASE} WITH DURATION INF SHARD DURATION 90d"
      - name: Grade
        run: >-
          ./bin/grade influx
          --connection-url="http://localhost:8086"
          --database="${DATABASE}"
          --measurement="${COLLECTION}"
          --hardwareid="github/actions"
          --goversion="$(go version | cut -d' ' -f3-)"
          --revision="${{ github.sha }}"
          --timestamp=${{ steps.commited-at.outputs.result }}
          --branch="${{ github.ref }}"
          < log/test.log
          2>&1
          | tee -a logs/influx.log
      - name: Check DB
        run: >-
          docker exec influxdb influx -database ${DATABASE} -execute "SELECT * FROM ${COLLECTION}"
          2>&1
          | tee -a logs/db.log
      - name: Grep
        run: |
          grep "BenchmarkFib" logs/db.log
          grep "BenchmarkFibDriver" logs/db.log
      - name: Docker logs
        if: failure()
        run: |
          docker ps 2>&1 > logs/ps.log
          docker logs influxdb 2>&1 > logs/container.log
      - name: Upload log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: influx
          path: logs

  mongo:
    name: Grade MongoDB
    needs: tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: "--name=mongodb"
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: secret
    env:
      DATABASE: Benchmarks
      COLLECTION: Grade
    steps:
      - name: Download grade
        uses: actions/download-artifact@v1
        with:
          name: bin
      - name: Make executable
        run: chmod +x bin/grade
      - name: Download log
        uses: actions/download-artifact@v1
        with:
          name: log
      - uses: actions/github-script@0.3.0
        id: commited-at
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const commit_details = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
            return commit_details.data.author.date
      - name: Make logs dir
        run: mkdir logs
      - name: Grade dry-run
        run: >-
          ./bin/grade mongo
          --connection-url=""
          --hardwareid="github/actions"
          --goversion="$(go version | cut -d' ' -f3-)"
          --revision="${{ github.sha }}"
          --timestamp=${{ steps.commited-at.outputs.result }}
          --branch="${{ github.ref }}"
          < log/test.log
          2>&1
          | tee -a logs/dry-run.log
      - name: Grep
        run: |
          grep "BenchmarkFib" logs/dry-run.log
          grep "BenchmarkFibDriver" logs/dry-run.log
      - name: Grade
        run: >-
          ./bin/grade mongo
          --connection-url="mongodb://admin:secret@localhost:27017"
          --database="${DATABASE}"
          --collection="${COLLECTION}"
          --hardwareid="github/actions"
          --goversion="$(go version | cut -d' ' -f3-)"
          --revision="${{ github.sha }}"
          --timestamp=${{ steps.commited-at.outputs.result }}
          --branch="${{ github.ref }}"
          < log/test.log
          2>&1
          | tee -a logs/mongo.log
          | grep ObjectID
      - name: Check DB
        run: >-
          docker exec mongodb mongo -u admin -p secret --authenticationDatabase=admin ${DATABASE} --eval="db.${COLLECTION}.find()"
          2>&1
          | tee -a logs/db.log
      - name: Grep
        run: |
          grep "BenchmarkFib" logs/db.log
          grep "BenchmarkFibDriver" logs/db.log
      - name: Docker logs
        if: failure()
        run: |
          docker ps 2>&1 > logs/ps.log
          docker logs mongodb 2>&1 > logs/container.log
      - name: Upload log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: mongo
          path: logs
